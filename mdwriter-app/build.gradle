plugins {
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.1.0' 
}
mainClassName = 'com.mdwriter.app.MainApp'
run {
  systemProperty 'pf4j.pluginsDir', '../build/plugins'
}
javafx {
  version = "21.0.1"
  modules = [ 'javafx.controls','javafx.web', 'javafx.fxml' ]
}
dependencies {
  implementation project(':mdwriter-api')
  implementation group: 'org.pf4j', name: 'pf4j', version: "${pf4jVersion}"
  annotationProcessor(group: 'org.pf4j', name: 'pf4j', version: "${pf4jVersion}")
  implementation group: 'commons-io', name: 'commons-io', version: '2.5'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
  implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
  testImplementation group: 'junit', name: 'junit', version: '4.+'
  implementation 'org.kordamp.ikonli:ikonli-javafx:12.4.0'
  implementation 'io.github.mkpaz:atlantafx-base:2.1.0'
implementation 'org.kordamp.ikonli:ikonli-feather-pack:12.4.0'
 implementation 'com.vladsch.flexmark:flexmark:0.64.8' 
}

task uberjar(type: Jar, dependsOn: ['compileJava']) {
  zip64 true
duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from configurations.runtimeClasspath.asFileTree.files.collect {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
    zipTree(it)
  }
  from files(sourceSets.main.output.classesDirs)
  from files(sourceSets.main.resources)
  manifest {
    attributes 'Main-Class': mainClassName
  }

  archiveBaseName = "${project.name}-plugin-demo"
  archiveClassifier = "uberjar"
}

